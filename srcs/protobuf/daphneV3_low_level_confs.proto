syntax = "proto3";

message cmd_writeAFEReg {
	uint32 afeBlock    = 1;
	uint32 regAddress  = 2;
	uint32 regValue    = 3; 
}

message cmd_writeAFEReg_response{
	bool   success     = 1;
	string message     = 2;
	uint32 afeBlock    = 3;
	uint32 regAddress  = 4;
	uint32 regValue    = 5;
}

message cmd_writeAFEVGAIN {
	uint32 afeBlock   = 1;
	uint32 vgainValue = 2;
}

message cmd_writeAFEVgain_response {
	bool   success     = 1;
	string message     = 2;
	uint32 afeBlock    = 3;
	uint32 vgainValue  = 4;
}

message cmd_writeAFEAttenuation {
	uint32 afeBlock   = 1;
	uint32 attenuation = 2;
}

message cmd_writeAFEAttenuation_response {
	bool   success     = 1;
	string message     = 2;
	uint32 afeBlock    = 3;
	uint32 attenuation  = 4;
}

message cmd_writeAFEBiasSet {
	uint32 afeBlock  = 1;
	uint32 biasValue = 2;
}

message cmd_writeAFEBiasSet_response {
	bool   success     = 1;
	string message     = 2;
	uint32 afeBlock    = 3;
	uint32 biasValue   = 4;
}

message cmd_writeTRIM_allChannels {
	uint32 trimValue = 1;
	bool   trimGain  = 2;
}

message cmd_writeTRIM_allChannels_response {
	bool   success     = 1;
	string message     = 2;
	uint32 trimValue   = 3;
	bool   trimGain    = 4;
}

message cmd_writeTrim_allAFE {
	uint32 afeBlock  = 1;
	uint32 trimValue = 2;
	bool   trimGain  = 3;
}

message cmd_writeTrim_allAFE_response {
	bool   success     = 1;
	string message     = 2;
	uint32 afeBlock    = 3;
	uint32 trimValue   = 4;
	bool   trimGain    = 5;
}

message cmd_writeTrim_singleChannel {
	uint32 trimChannel = 1;
	uint32 trimValue   = 2;
	bool   trimGain    = 3;
}

message cmd_writeTrim_singleChannel_response {
	bool   success     = 1;
	string message     = 2;
	uint32 trimChannel = 3;
	uint32 trimValue   = 4;
	bool   trimGain    = 5;
}

message cmd_writeOFFSET_allChannels {
	int32  id          = 1;
	uint32 offsetValue = 2;
	bool   offsetGain  = 3;
}

message cmd_writeOFFSET_allChannels_response {
	bool   success     = 1;
	string message     = 2;
	uint32 offsetValue = 3;
	bool   offsetGain  = 4;
}

message cmd_writeOFFSET_allAFE {
	uint32 afeBlock    = 1;
	uint32 offsetValue = 2;
	bool   offsetGain  = 3;
}

message cmd_writeOFFSET_allAFE_response {
	bool   success     = 1;
	string message     = 2;
	uint32 afeBlock    = 3;
	uint32 offsetValue = 4;
	bool   offsetGain  = 5;
}

message cmd_writeOFFSET_singleChannel {
	uint32 offsetChannel   = 1;
	uint32 offsetValue   = 2;
	bool   offsetGain    = 3;
}

message cmd_writeOFFSET_singleChannel_response {
	bool   success       = 1;
	string message       = 2;
	uint32 offsetChannel   = 3;
	uint32 offsetValue   = 4;
	bool   offsetGain    = 5;
}

message cmd_writeVbiasControl {
	uint32 vBiasControlValue = 1;
	bool   enable            = 2;
}

message cmd_writeVbiasControl_response {
	bool   success           = 1;
	string message           = 2;
	uint32 vBiasControlValue = 3; 
}

message cmd_readAFEReg {
	uint32 afeBlock = 1;
	uint32 regAddress = 2;
}

message cmd_readAFEReg_response {
	bool   success = 1;
	string message = 2;
	uint32 afeBlock = 3;
	uint32 regAddress = 4;
	uint32 regValue = 5;
}
 
message cmd_readAFEVgain {
	uint32 afeBlock = 1;
}

message cmd_readAFEVgain_response {
	bool   success = 1;
	string message = 2;
	uint32 afeBlock = 3;
	uint32 vgainValue = 4;
}

message cmd_readAFEBiasSet {
	uint32 afeBlock = 1;
}

message cmd_readAFEBiasSet_response {
	bool   success = 1;
	string message = 2;
	uint32 afeBlock = 3;
	uint32 biasValue = 4;
}

message cmd_readTrim_allChannels {
}

message cmd_readTrim_allChannels_response {
	bool   success = 1;
	string message = 2;
	repeated uint32 trimValues = 3;
}

message cmd_readTrim_allAFE {
	uint32 afeBlock = 1;
}

message cmd_readTrim_allAFE_response {
	bool   success = 1;
	string message = 2;
	uint32 afeBlock = 3;
	repeated uint32 trimValues = 4;
}

message cmd_readTrim_singleChannel {
	uint32 trimChannel = 1;  
}

message cmd_readTrim_singleChannel_response {
	bool   success = 1;
	string message = 2;
	uint32 trimChannel = 3;
	uint32 trimValue = 4;
}

message cmd_readOffset_allChannels {
}

message cmd_readOffset_allChannels_response {
	bool   success = 1;
	string message = 2;
	repeated uint32 offsetValues = 3;
}

message cmd_readOffset_allAFE {
	uint32 afeBlock = 1;
}

message cmd_readOffset_allAFE_response {
	bool   success = 1;
	string message = 2;
	uint32 afeBlock = 3;
	repeated uint32 offsetValues = 4;
}

message cmd_readOffset_singleChannel {
	uint32 offsetChannel = 1;
}

message cmd_readOffset_singleChannel_response {
	bool   success = 1;
	string message = 2;
	uint32 offsetChannel = 3;
	uint32 offsetValue = 4;
}

message cmd_readVbiasControl {
}

message cmd_readVbiasControl_response {
	bool   success = 1;
	string message = 2;
	uint32 vBiasControlValue = 3; 
}

message cmd_readCurrentMonitor {
	uint32 currentMonitorChannel = 1;
}

message cmd_readCurrentMonitor_response {
	bool   success = 1;
	string message = 2;
	uint32 currentMonitorChannel = 3;
	uint32 currentValue = 4;
}

message cmd_readBiasVoltageMonitor {
	uint32 afeBlock = 1;
}

message cmd_readBiasVoltageMonitor_response {
	bool   success = 1;
	string message = 2;
	uint32 afeBlock = 3;
	uint32 biasVoltageValue = 4;
}

message cmd_setAFEReset {
	bool resetValue = 1;
}

message cmd_setAFEReset_response {
	bool success = 1;
	string message = 2;
	bool resetValue = 3;
}

message cmd_doAFEReset {
}

message cmd_doAFEReset_response {
	bool success = 1;
	string message = 2;
}

message cmd_setAFEPowerState {
	bool powerState = 1;
}

message cmd_setAFEPowerState_response {
	bool success = 1;
	string message = 2;
	uint32 powerState = 3;
}

message cmd_alignAFE {
  	uint32 afe = 1;
}

message cmd_alignAFE_response {
	bool success = 1;
	uint32 afe = 2;
	uint32 delay = 3;
	uint32 bitslip = 4;
	string message = 5;
}

message cmd_writeAFEFunction {
	uint32 afeBlock = 1;
	string function = 2;
	uint32 configValue = 3;
}

message cmd_writeAFEFunction_response {
	bool success = 1;
	string message = 2;
	uint32 afeBlock = 3;
	string function = 4;
	uint32 configValue = 5;
}

message cmd_doSoftwareTrigger {

}

message cmd_doSoftwareTrigger_response {
	bool success = 1;
	string message = 2;
}






