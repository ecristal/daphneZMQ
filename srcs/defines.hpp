#ifndef DEFINES_HPP
#define DEFINES_HPP

#include <unordered_map>
#include <string>
#include <vector>

namespace afe_definitions {
    
    using BitField = std::unordered_map<uint32_t, std::pair<int, int>>;

    const std::unordered_map<uint32_t, uint32_t> AFE_board2PL_map{
        {0, 0},
        {1, 4},
        {2, 3},
        {3, 2},
        {4, 1}
    };

    const std::unordered_map<uint32_t, uint32_t> AFE_PL2board_map{
        {0, 0},
        {4, 1},
        {3, 2},
        {2, 3},
        {1, 4}
    };

    // {FUNCTION_NAME, {REGISTER_ADDR, {BITH, BITL}}}
    const std::unordered_map<std::string, BitField> afeFunctionDict = { 
        {"SOFTWARE_RESET", {{0, {0, 0}}}},
        {"REGISTER_READOUT_ENABLE", {{0, {1, 1}}}},
        {"ADC_COMPLETE_PDN", {{1, {0, 0}}}},
        {"LVDS_OUTPUT_DISABLE", {{1, {1, 1}}}},
        {"ADC_PDN_CH", {{1, {9, 2}}}},
        {"PARTIAL_PDN", {{1, {10, 10}}}},
        {"LOW_FREQUENCY_NOISE_SUPPRESSION", {{1, {11, 11}}}},
        {"EXT_REF", {{1 , {13, 13}}}},
        {"LVDS_OUTPUT_RATE_2X", {{1, {12, 14}}}},
        {"SINGLE-ENDED_CLK_MODE", {{1, {15, 15}}}},
        {"POWER-DOWN_LDVS", {{2, {10, 3}}}},
        {"AVERAGING_ENABLE", {{2, {11, 11}}}},
        {"LOW_LATENCY", {{2, {12, 12}}}},
        {"TEST_PATTERN_MODES", {{2, {15, 13}}}},
        {"INVERT_CHANNELS", {{3, {7, 0}}}},
        {"CHANNEL_OFFSET_SUBSTRACTION_ENABLE", {{3, {8, 8}}}},
        {"DIGITAL_GAIN_ENABLE", {{3, {12, 12}}}},
        {"SERIALIZED_DATA_RATE", {{3, {14, 13}}}},
        {"ENABLE_EXTERNAL_REFERENCE_MODE", {{3, {15, 15}}}},
        {"ADC_RESOLUTION_RESET", {{4, {1, 1}}}},
        {"ADC_OUTPUT_FORMAT", {{4, {3, 3}}}},
        {"LSB_MSB_FIRST", {{4, {4 ,4}}}},
        {"CUSTOM_PATTERN", {{5, {13, 0}}}},
        {"SYNC_PATTERN", {{10, {8, 8}}}},
        {"OFFSET_CH1", {{13, {9, 0}}}},
        {"DIGITAL_GAIN_CH1", {{13, {15, 11}}}},
        {"OFFSET_CH2", {{15, {9, 0}}}},
        {"DIGITAL_GAIN_CH2", {{15, {15, 11}}}},
        {"OFFSET_CH3", {{17, {9, 0}}}},
        {"DIGITAL_GAIN_CH3", {{17, {15, 11}}}},
        {"OFFSET_CH4", {{19, {9, 0}}}},
        {"DIGITAL_GAIN_CH4", {{19, {15, 11}}}},
        {"DIGITAL_HPF_FILTER_ENABLE_CH1-4", {{21, {0, 0}}}},
        {"DIGITAL_HPF_FILTER_K_CH1-4", {{21, {4, 1}}}},
        {"OFFSET_CH8", {{25, {9, 0}}}},
        {"DIGITAL_GAIN_CH8", {{25, {15, 11}}}},
        {"OFFSET_CH7", {{27, {9, 0}}}},
        {"DIGITAL_GAIN_CH7", {{27, {15, 11}}}},
        {"OFFSET_CH6", {{29, {9, 0}}}},
        {"DIGITAL_GAIN_CH6", {{29, {15, 11}}}},
        {"OFFSET_CH5", {{31, {9, 0}}}},
        {"DIGITAL_GAIN_CH5", {{31, {15, 11}}}},
        {"DIGITAL_HPF_FILTER_ENABLE_CH5-8", {{33, {0, 0}}}},
        {"DIGITAL_HPF_FILTER_K_CH5-8", {{33, {4, 1}}}},
        {"DITHER", {{66, {15, 15}}}},
        {"PGA_CLAMP_-6dB", {{50, {10, 10}}}},
        {"LPF_PROGRAMMABILITY", {{51, {3, 1}}}},
        {"PGA_INTEGRATOR_DISABLE", {{51, {4, 4}}}},
        {"PGA_CLAMP_LEVEL", {{51, {7, 5}}}},
        {"PGA_GAIN_CONTROL", {{51, {13, 13}}}},
        {"ACTIVE_TERMINATION_INDIVIDUAL_RESISTOR_CNTL", {{52, {4, 0}}}},
        {"ACTIVE_TERMINATION_INDIVIDUAL_RESISTOR_ENABLE", {{52, {5, 5}}}},
        {"PRESET_ACTIVE_TERMINATIONS", {{52, {7, 6}}}},
        {"ACTIVE_TERMINATION_ENABLE", {{52, {8, 8}}}},
        {"LNA_INPUT_CLAMP_SETTING", {{52, {10, 9}}}},
        {"LNA_INTEGRATOR_DISABLE", {{52, {12, 12}}}},
        {"LNA_GAIN", {{52, {14, 13}}}},
        {"LNA_INDIVIDUAL_CH_CNTL", {{52, {15, 15}}}},
        {"PDN_CH", {{53, {7, 0}}}},
        {"LOW_POWER", {{53, {10, 10}}}},
        {"MED_POWER", {{53, {11, 11}}}},
        {"PDN_VCAT_PGA", {{53, {12, 12}}}},
        {"PDN_LNA", {{53, {13, 13}}}},
        {"VCA_PARTIAL_PDN", {{53, {14, 14}}}},
        {"VCA_COMPLETE_PDN", {{53, {15, 15}}}},
        {"CW_SUM_AMP_GAIN_CNTL", {{54, {4, 0}}}},
        {"CW_16X_CLK_SEL", {{54, {5, 5}}}},
        {"CW_1X_CLK_SEL", {{54, {6, 6}}}},
        {"CW_TGC_SEL", {{54, {8, 8}}}}, 
        {"CW_SUM_AMP_ENABLE", {{54, {9, 9}}}},
        {"CW_CLK_MODE_SEL", {{54, {11, 10}}}},
        {"CH1_CW_MIXER_PHASE", {{55, {3 ,0}}}},
        {"CH2_CW_MIXER_PHASE", {{55, {7, 4}}}},
        {"CH3_CW_MIXER_PHASE", {{55, {11, 8}}}},
        {"CH4_CW_MIXER_PHASE", {{55, {15, 12}}}},
        {"CH5_CW_MIXER_PHASE", {{56, {3, 0}}}},
        {"CH6_CW_MIXER_PHASE", {{56, {7, 4}}}},
        {"CH7_CW_MIXER_PHASE", {{56, {11, 8}}}},
        {"CH8_CW_MIXER_PHASE", {{56, {15, 12}}}},
        {"CH1_LNA_GAIN_CNTL", {{57, {1, 0}}}},
        {"CH2_LNA_GAIN_CNTL", {{57, {3, 2}}}},
        {"CH3_LNA_GAIN_CNTL", {{57, {5, 4}}}},
        {"CH4_LNA_GAIN_CNTL", {{57, {7, 6}}}},
        {"CH5_LNA_GAIN_CNTL", {{57, {9, 8}}}},
        {"CH6_LNA_GAIN_CNTL", {{57, {11, 10}}}},
        {"CH7_LNA_GAIN_CNTL", {{57, {13, 12}}}},
        {"CH8_LNA_GAIN_CNTL", {{57, {15, 14}}}},
        {"HPF_LNA", {{59, {3, 2}}}},
        {"DIG_TGC_ATT_GAIN", {{59, {6, 4}}}},
        {"DIG_TGC_ATT", {{59, {7, 7}}}},
        {"CW_SUM_AMP_PDN", {{59, {8, 8}}}},
        {"PGA_TEST_MODE", {{59 , {9, 9}}}}
    };

    const std::unordered_map<std::string, std::vector<uint16_t>> afeFunctionAvailableOptionsDict = { 
        {"SOFTWARE_RESET", {0, 1}},
        {"REGISTER_READOUT_ENABLE", {0, 1}},
        {"ADC_COMPLETE_PDN", {0, 1}},
        {"LVDS_OUTPUT_DISABLE", {0, 1}},
        {"ADC_PDN_CH", {0, 0xFF}},
        {"PARTIAL_PDN", {0, 1}},
        {"LOW_FREQUENCY_NOISE_SUPPRESSION", {0, 1}},
        {"EXT_REF", {0, 1}},
        {"LVDS_OUTPUT_RATE_2X", {0, 1}},
        {"SINGLE-ENDED_CLK_MODE", {0, 1}},
        {"POWER-DOWN_LDVS", {0, 1}},
        {"AVERAGING_ENABLE", {0, 1}},
        {"LOW_LATENCY", {0, 1}},
        {"TEST_PATTERN_MODES", {0, 0x7}},
        {"INVERT_CHANNELS", {0, 0xFF}},
        {"CHANNEL_OFFSET_SUBSTRACTION_ENABLE", {0, 1}},
        {"DIGITAL_GAIN_ENABLE", {0, 1}},
        {"SERIALIZED_DATA_RATE", {0, 0x3}},
        {"ENABLE_EXTERNAL_REFERENCE_MODE", {0, 1}},
        {"ADC_RESOLUTION_RESET", {0, 1}},
        {"ADC_OUTPUT_FORMAT", {0, 1}},
        {"LSB_MSB_FIRST", {0, 1}},
        {"CUSTOM_PATTERN", {0, 0x3FFF}},
        {"SYNC_PATTERN", {0, 1}},
        {"OFFSET_CH1", {0, 0x3FF}},
        {"DIGITAL_GAIN_CH1", {0, 0x1F}},
        {"OFFSET_CH2", {0, 0x3FF}},
        {"DIGITAL_GAIN_CH2", {0, 0x1F}},
        {"OFFSET_CH3", {0, 0x3FF}},
        {"DIGITAL_GAIN_CH3", {0, 0x1F}},
        {"OFFSET_CH4", {0, 0x3FF}},
        {"DIGITAL_GAIN_CH4", {0, 0x1F}},
        {"DIGITAL_HPF_FILTER_ENABLE_CH1-4", {0, 1}},
        {"DIGITAL_HPF_FILTER_K_CH1-4", {2, 10}},
        {"OFFSET_CH8", {0, 0x3FF}},
        {"DIGITAL_GAIN_CH8", {0, 0x1F}},
        {"OFFSET_CH7", {0, 0x3FF}},
        {"DIGITAL_GAIN_CH7", {0, 0x1F}},
        {"OFFSET_CH6", {0, 0x3FF}},
        {"DIGITAL_GAIN_CH6", {0, 0x1F}},
        {"OFFSET_CH5", {0, 0x3FF}},
        {"DIGITAL_GAIN_CH5", {0, 0x1F}},
        {"DIGITAL_HPF_FILTER_ENABLE_CH5-8", {0, 1}},
        {"DIGITAL_HPF_FILTER_K_CH5-8", {2, 10}},
        {"DITHER", {0, 1}},
        {"PGA_CLAMP_-6dB", {0, 1}},
        {"LPF_PROGRAMMABILITY", {0, 2, 3, 4}},
        {"PGA_INTEGRATOR_DISABLE", {0, 1}},
        {"PGA_CLAMP_LEVEL", {0, 7}},
        {"PGA_GAIN_CONTROL", {0, 1}},
        {"ACTIVE_TERMINATION_INDIVIDUAL_RESISTOR_CNTL", {0, 0x1F}},
        {"ACTIVE_TERMINATION_INDIVIDUAL_RESISTOR_ENABLE", {0, 1}},
        {"PRESET_ACTIVE_TERMINATIONS", {0, 3}},
        {"ACTIVE_TERMINATION_ENABLE", {0, 1}},
        {"LNA_INPUT_CLAMP_SETTING", {0, 3}},
        {"LNA_INTEGRATOR_DISABLE", {0, 1}},
        {"LNA_GAIN", {0, 3}},
        {"LNA_INDIVIDUAL_CH_CNTL", {0, 1}},
        {"PDN_CH", {0, 0xFF}},
        {"LOW_POWER", {0, 1}},
        {"MED_POWER", {0, 1}},
        {"PDN_VCAT_PGA", {0, 1}},
        {"PDN_LNA", {0, 1}},
        {"VCA_PARTIAL_PDN", {0, 1}},
        {"VCA_COMPLETE_PDN", {0, 1}},
        {"CW_SUM_AMP_GAIN_CNTL", {0, 1, 2, 4, 8, 16}},
        {"CW_16X_CLK_SEL", {0, 1}},
        {"CW_1X_CLK_SEL", {0, 1}},
        {"CW_TGC_SEL", {0, 1}}, 
        {"CW_SUM_AMP_ENABLE", {0, 1}},
        {"CW_CLK_MODE_SEL", {0, 3}},
        {"CH1_CW_MIXER_PHASE", {0, 0xF}},
        {"CH2_CW_MIXER_PHASE", {0, 0xF}},
        {"CH3_CW_MIXER_PHASE", {0, 0xF}},
        {"CH4_CW_MIXER_PHASE", {0, 0xF}},
        {"CH5_CW_MIXER_PHASE", {0, 0xF}},
        {"CH6_CW_MIXER_PHASE", {0, 0xF}},
        {"CH7_CW_MIXER_PHASE", {0, 0xF}},
        {"CH8_CW_MIXER_PHASE", {0, 0xF}},
        {"CH1_LNA_GAIN_CNTL", {0, 3}},
        {"CH2_LNA_GAIN_CNTL", {0, 3}},
        {"CH3_LNA_GAIN_CNTL", {0, 3}},
        {"CH4_LNA_GAIN_CNTL", {0, 3}},
        {"CH5_LNA_GAIN_CNTL", {0, 3}},
        {"CH6_LNA_GAIN_CNTL", {0, 3}},
        {"CH7_LNA_GAIN_CNTL", {0, 3}},
        {"CH8_LNA_GAIN_CNTL", {0, 3}},
        {"HPF_LNA", {0, 3}},
        {"DIG_TGC_ATT_GAIN", {0, 0x7}},
        {"DIG_TGC_ATT", {0, 1}},
        {"CW_SUM_AMP_PDN", {0, 1}},
        {"PGA_TEST_MODE", {0, 1}}
    };
}

namespace I2C_drivers_defines{

    const std::unordered_map<std::string, uint8_t> I2CDevicesAddress = {
        {"SW_REG_3VD3", 0x12}, // DIGITAL +3.3VD
        {"SW_REG_2VA1", 0x16}, // ANALOG +2.1V
        {"SW_REG_3VA6", 0x32}, // ANALOG +3.6V
        {"SW_REG_1VD8", 0x36}, // DIGITAL +1.8VD
        {"CLK_GEN", 0x70}, // Checked
        {"I2C_EXP_MEZZ", 0x71},
        {"I2C_EXP_SFP", 0x72},
        //{"VBIAS_MON", 0x16}, //ADS7138QRTERQ1
        //{"CM_MONITOR", 0x23}, //ADS7138QRTERQ1
        //{"TEMP_SENSOR", 0x24} //MCP9808-E/MS
    };

    const std::unordered_map<std::string, uint8_t> PJT004A0X43_SRZ_RegisterMAP = {
        {"OPERATION", 0x01},
        {"ON_OFF_CONFIG", 0x02},
        {"CLEAR_FAULTS", 0x03},
        {"WRITE_PROTECT", 0x10},
        {"STORE_USER_ALL", 0x15},
        {"RESTORE_USER_ALL", 0x16},
        {"CAPABILITY", 0x19},
        {"VOUT_MODE", 0x20},
        {"VIN_ON", 0x35},
        {"VIN_OFF", 0x36},
        {"IOUT_CAL_GAIN", 0x38},
        {"IOUT_CAL_OFFSET", 0x39},
        {"IOUT_OC_FAULT_LIMIT", 0x46},
        {"IOUT_OC_FAULT_RESPONSE", 0x47},
        {"IOUT_OC_WARN_LIMIT", 0x4A},
        {"OT_FAULT_LIMIT", 0x4F},
        {"OT_WARN_LIMIT", 0x51},
        {"TON_RISE", 0x61},
        {"STATUS_BYTE", 0x78},
        {"STATUS_WORD", 0x79},
        {"STATUS_VOUT", 0x7A},
        {"STATUS_IOUT", 0x7B},
        {"STATUS_TEMPERATURE", 0x7D},
        {"STATUS_CML", 0x7E},
        {"STATUS_MFR_SPECIFIC", 0x80},
        {"READ_VOUT", 0x8B},
        {"READ_IOUT", 0x8C},
        {"READ_TEMPERATURE_2", 0x8E},
        {"PMBUS_REVISION", 0x98},
        {"MFR_SPECIFIC_00", 0xD0},
        {"VREF_TRIM", 0xD4},
        {"STEP_VREF_MARGIN_HIGH", 0xD5},
        {"STEP_VREF_MARGIN_LOW", 0xD6},
        {"PCT_VOUT_FAULT_PG_LIMIT", 0xD7},
        {"SEQUENCE_TON_TOFF_DELAY", 0xD8}
    };

    // Dictionaries related specifically to the HD Mezzanine Board
    const std::unordered_map<std::string, uint8_t> HDMezzAddressMap = {
        {"INA232_3V3_ADDR", 0x40},  // 1000000
        {"INA232_5V_ADDR", 0x42},  // 1000010
        {"TCA9536_ADDR", 0x41},    //1000001
        // INA232 register address
        {"INA232_CONF_REG", 0x0},
        {"INA232_SHUNT_VOLTAGE_REG", 0x1},
        {"INA232_BUS_VOLTAGE_REG", 0x2},
        {"INA232_POWER_REG", 0x3},
        {"INA232_CURRENT_REG", 0x4},
        {"INA232_CALIBRATION_REG", 0x5},
        {"INA232_MASK_ENABLE_REG", 0x6},
        {"INA232_ALERT_LIMIT_REG", 0x7},
        {"INA232_MANUFACTURER_ID_REG", 0x3E},
        // TCA9536 register address
        {"TCA9536_INPUT_PORT_REG", 0x0},
        {"TCA9536_OUTPUT_PORT_REG", 0x1},
        {"TCA9536_POLARITY_INVERSION_REG", 0x2},
        {"TCA9536_CONF_REG", 0x3},
        {"TCA9536_SPECIAL_FUNCTION_REG", 0x50}
    };

    // AFE Mezzanine Board encoder for the I2C expander configuration
    const std::unordered_map<std::string, uint8_t> HDMezzExpanderEncoder = {
        {"AFE0_MEZZ", 0b00001},
        {"AFE1_MEZZ", 0b00010},
        {"AFE2_MEZZ", 0b00100},
        {"AFE3_MEZZ", 0b01000},
        {"AFE4_MEZZ", 0b10000}
    };

    // ADCs to monitor regulators and SiPM BIAS voltages 
    enum class ADS7138RegisterMap : uint8_t {
        SYSTEM_STATUS       = 0x00,
        GENERAL_CFG         = 0x01,
        DATA_CFG            = 0x02,
        OSR_CFG             = 0x03,
        OPMODE_CFG          = 0x04,
        PIN_CFG             = 0x05,
        GPIO_CFG            = 0x07,
        GPO_DRIVE_CFG       = 0x09,
        GPO_VALUE           = 0x0B,
        GPI_VALUE           = 0x0D,
        SEQUENCE_CFG        = 0x10,
        MANUAL_CH_SEL       = 0x11,
        AUTO_SEQ_CH_SEL     = 0x12,
        ALERT_CH_SEL        = 0x14,
        ALERT_FUNC_SEL      = 0x16,
        ALERT_PIN_CFG       = 0x17,
        EVENT_FLAG          = 0x18,
        EVENT_HIGH_FLAG     = 0x1A,
        EVENT_LOW_FLAG      = 0x1C,
        EVENT_RGN           = 0x1E,
        HYSTERESIS_CH0      = 0x20,
        HIGH_TH_CH0         = 0x21,
        EVENT_COUNT_CH0     = 0x22,
        LOW_TH_CH0          = 0x23,
        HYSTERESIS_CH1      = 0x24,
        HIGH_TH_CH1         = 0x25,
        EVENT_COUNT_CH1     = 0x26,
        LOW_TH_CH1          = 0x27,
        HYSTERESIS_CH2      = 0x28,
        HIGH_TH_CH2         = 0x29,
        EVENT_COUNT_CH2     = 0x2A,
        LOW_TH_CH2          = 0x2B,
        HYSTERESIS_CH3      = 0x2C,
        HIGH_TH_CH3         = 0x2D,
        EVENT_COUNT_CH3     = 0x2E,
        LOW_TH_CH3          = 0x2F,
        HYSTERESIS_CH4      = 0x30,
        HIGH_TH_CH4         = 0x31,
        EVENT_COUNT_CH4     = 0x32,
        LOW_TH_CH4          = 0x33,
        HYSTERESIS_CH5      = 0x34,
        HIGH_TH_CH5         = 0x35,
        EVENT_COUNT_CH5     = 0x36,
        LOW_TH_CH5          = 0x37,
        HYSTERESIS_CH6      = 0x38,
        HIGH_TH_CH6         = 0x39,
        EVENT_COUNT_CH6     = 0x3A,
        LOW_TH_CH6          = 0x3B,
        HYSTERESIS_CH7      = 0x3C,
        HIGH_TH_CH7         = 0x3D,
        EVENT_COUNT_CH7     = 0x3E,
        LOW_TH_CH7          = 0x3F,
        MAX_CH0_LSB         = 0x60,
        MAX_CH0_MSB         = 0x61,
        MAX_CH1_LSB         = 0x62,
        MAX_CH1_MSB         = 0x63,
        MAX_CH2_LSB         = 0x64,
        MAX_CH2_MSB         = 0x65,
        MAX_CH3_LSB         = 0x66,
        MAX_CH3_MSB         = 0x67,
        MAX_CH4_LSB         = 0x68,
        MAX_CH4_MSB         = 0x69,
        MAX_CH5_LSB         = 0x6A,
        MAX_CH5_MSB         = 0x6B,
        MAX_CH6_LSB         = 0x6C,
        MAX_CH6_MSB         = 0x6D,
        MAX_CH7_LSB         = 0x6E,
        MAX_CH7_MSB         = 0x6F,
        MIN_CH0_LSB         = 0x80,
        MIN_CH0_MSB         = 0x81,
        MIN_CH1_LSB         = 0x82,
        MIN_CH1_MSB         = 0x83,
        MIN_CH2_LSB         = 0x84,
        MIN_CH2_MSB         = 0x85,
        MIN_CH3_LSB         = 0x86,
        MIN_CH3_MSB         = 0x87,
        MIN_CH4_LSB         = 0x88,
        MIN_CH4_MSB         = 0x89,
        MIN_CH5_LSB         = 0x8A,
        MIN_CH5_MSB         = 0x8B,
        MIN_CH6_LSB         = 0x8C,
        MIN_CH6_MSB         = 0x8D,
        MIN_CH7_LSB         = 0x8E,
        MIN_CH7_MSB         = 0x8F,
        RECENT_CH0_LSB      = 0xA0,
        RECENT_CH0_MSB      = 0xA1,
        RECENT_CH1_LSB      = 0xA2,
        RECENT_CH1_MSB      = 0xA3,
        RECENT_CH2_LSB      = 0xA4,
        RECENT_CH2_MSB      = 0xA5,
        RECENT_CH3_LSB      = 0xA6,
        RECENT_CH3_MSB      = 0xA7,
        RECENT_CH4_LSB      = 0xA8,
        RECENT_CH4_MSB      = 0xA9,
        RECENT_CH5_LSB      = 0xAA,
        RECENT_CH5_MSB      = 0xAB,
        RECENT_CH6_LSB      = 0xAC,
        RECENT_CH6_MSB      = 0xAD,
        RECENT_CH7_LSB      = 0xAE,
        RECENT_CH7_MSB      = 0xAF,
        GPO0_TRIG_EVENT_SEL = 0xC3,
        GPO1_TRIG_EVENT_SEL = 0xC5,
        GPO2_TRIG_EVENT_SEL = 0xC7,
        GPO3_TRIG_EVENT_SEL = 0xC9,
        GPO4_TRIG_EVENT_SEL = 0xCB,
        GPO5_TRIG_EVENT_SEL = 0xCD,
        GPO6_TRIG_EVENT_SEL = 0xCF,
        GPO7_TRIG_EVENT_SEL = 0xD1,
        GPO_TRIGGER_CFG     = 0xE9,
        GPO_VALUE_TRIG      = 0xEB
    };

    enum class ADS7138OpCodes : uint8_t {
        SINGLE_REGISTER_READ      = 0b00010000,
        SINGLE_REGISTER_WRITE     = 0b00001000,
        SET_BIT                   = 0b00011000,
        CLEAR_BIT                 = 0b00100000,
        CONTINUOS_BLOCK_READ      = 0b00110000,
        CONTINUOS_BLOCK_WRITE     = 0b00101000
    };
    
}

#endif // CONSTANTES_HPP